import_from_git(
  url: "https://github.com/jimmy-hung/fastlane-ios", # The URL of the repository to import the Fastfile from.
  path: "Fastfile" # The path of the Fastfile in the repository. Defaults to fastlane/Fastfile.
)
require 'spaceship'
# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
platform :ios do

  lane :bao_init do
    Spaceship::Portal.login(CredentialsManager::AppfileConfig.try_fetch_value(:apple_id), ENV['FASTLANE_PASSWORD'])
    team_id = Spaceship::Portal.client.team_id

    Dir.chdir("..")
    xcode_folder = Dir["*.xcodeproj"].first

    project = Xcodeproj::Project.open(xcode_folder)
    plist_path = project.targets.first.build_configurations.first.build_settings['INFOPLIST_FILE'].gsub('$(SRCROOT)/', '')
    Dir.chdir("fastlane")

    # 修改display_name
    update_info_plist(
      plist_path: plist_path,
      display_name: ENV['PRODUCE_APP_NAME'].split('-').first
    )

    # 補上權限要求文字
    #set_info_plist_value(path: plist_path, key: "NSPhotoLibraryUsageDescription", value: "App needs your consent to access the album")
    #set_info_plist_value(path: plist_path, key: "NSPhotoLibraryAddUsageDescription", value: "App needs your consent to save photos")
    #set_info_plist_value(path: plist_path, key: "NSCameraUsageDescription", value: "App requires your consent to use the camera, as set head shot")
    #set_info_plist_value(path: plist_path, key: "NSCalendarsUsageDescription", value: "App needs your consent to access the calendar")

   # webview barTintColor設定
=begin
    if ENV['APP_TYPE'] == 'Sports'
      set_info_plist_value(path: plist_path, key: "barTintColor", value: "0x414141")
    elsif ENV['APP_TYPE'] == 'Lottery'
      set_info_plist_value(path: plist_path, key: "barTintColor", value: "0x8281E6")
    else
      set_info_plist_value(path: plist_path, key: "barTintColor", value: "0xDD3434")
    end
=end
    # http限制
    set_info_plist_value(path: plist_path, key: "NSAppTransportSecurity", subkey: "NSAllowsArbitraryLoads", value: true)
=begin
    # 解開status bar更改限制
    set_info_plist_value(path: plist_path, key: "UIViewControllerBasedStatusBarAppearance", value: false)

    # Localization
    set_info_plist_value(path: plist_path, key: "CFBundleDevelopmentRegion", value: "zh_CN")

    # 讀取plist中的LoginUserPhoneNumber塞到demo_user裡面
    # demo_user = get_info_plist_value(path: plist_path, key: "LoginPhoneNumber")
    # sh("echo #{demo_user} >| metadata/review_information/demo_user.txt")
    # sh("echo '123456' >| metadata/review_information/demo_password.txt")
=end
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    project.targets.each do |target|
      # 修改編譯設定
      target.build_configurations.each do |config|
        config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
        config.build_settings['DEVELOPMENT_TEAM'] = team_id
        config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = app_identifier
        config.build_settings['DEVELOPMENT_TEAM'] = team_id
        config.build_settings["CURRENT_PROJECT_VERSION"] = 1
        config.build_settings["SWIFT_VERSION"] = '4.2'
        config.build_settings["TARGETED_DEVICE_FAMILY"] = '1'
        config.build_settings["IPHONEOS_DEPLOYMENT_TARGET"] = '9.0'
        if config.name == 'Debug'
          config.build_settings['CODE_SIGN_IDENTITY'] = 'iPhone Developer'
          config.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = 'iPhone Developer'
          config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = "match Development #{app_identifier}"
        else
          config.build_settings['CODE_SIGN_IDENTITY'] = 'iPhone Distribution'
          config.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = 'iPhone Distribution'
          config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = "match AppStore #{app_identifier}"
        end
      end
      # 將BaoProxy資料夾加入專案檔
      # group = project.main_group.find_subpath('BaoProxy', true)
      # group.path = 'BaoProxy'
      # group.new_reference('BaoAppDelegate.h')
      # target.add_file_references([group.new_reference('BaoAppDelegate.m')])
      # target.add_resources([group.new_reference('BaoProxy.xcassets')])
      # group.new_reference('Bridging-Header.h')
      # target.add_resources([group.new_reference('LaunchScreenViewController.storyboard')])
      # target.add_file_references([group.new_reference('LaunchScreenViewController.swift')])
      # target.add_file_references([group.new_reference('ImageReader.swift')])
      # target.add_file_references([group.new_reference('RGB32.swift')])
    end
    project.save

    # 修改./.circleci/config.yml的環境變數
    sh("sed -i '' \"5s/.*/      - XCODE_SCHEME: '#{project.targets.first.name}'/\" ../.circleci/config.yml")

    # 替換logo
    # xcassets_file_name = project.targets.first.resources_build_phase.files.find { |file| file.display_name.include? "xcassets" }.file_ref.hierarchy_path
    # appicon(appicon_image_file: 'logo.jpg',
    #         appicon_devices: [:iphone, :ios_marketing],
    #         appicon_path: xcassets_file_name[1..-1])
    # 替換啟動圖片
    # sh('cp -f ../LaunchImage.jpg ../BaoProxy/BaoProxy.xcassets/LaunchImage.imageset/')

    # 去跳轉開關網站申請新的APP
    #require "base64"
    #access_token = "5/unsINft493qjOoKLiyvA=="
    #app_link = ""
    #if ENV['APP_TYPE'] == 'Sports'
    #  app_link = "https://m.jcnqapp.bet365app123456.com/"
    #elsif ENV['APP_TYPE'] == 'Lottery'
    #  app_link = "https://sscapp588699.com"
    #end

    #bao_jump_url = "http://52.175.12.176/api/v1/application"
    #uuid = sh("curl -s -X POST #{bao_jump_url} -d \"access_token=#{access_token}&app[name]=#{ENV['PRODUCE_APP_NAME']}&app[is_open]=0&app[plat_form]=IOS&app[comment]=✔✔h@ttp://52.175.12.176/index/index/uuid&app[is_block_ip]=0&app[link]=#{app_link}\"")
    #uuid = uuid.slice(1, uuid.length - 2)

    #base64_url = Base64.strict_encode64("http://52.175.12.176/index/index/#{uuid}")
   # sh("sed -i '' \"s/BASE64_URL_1/#{base64_url}/g\" ../BaoProxy/LaunchScreenViewController.swift")

    #bao_jump_url = "https://app-versions.herokuapp.com/api/v1/application"
    #uuid = sh("curl -s -X POST #{bao_jump_url} -d \"access_token=#{access_token}&app[name]=#{ENV['PRODUCE_APP_NAME']}&app[is_open]=0&app[comment]=h@ttps://app-versions.herokuapp.com/index/index/uuid✔&app[link]=#{app_link}\"")
    #uuid = uuid.slice(1, uuid.length - 2)
    #base64_url = Base64.strict_encode64("https://app-versions.herokuapp.com/index/index/#{uuid}")
   # sh("sed -i '' \"s/BASE64_URL_2/#{base64_url}/g\" ../BaoProxy/LaunchScreenViewController.swift")

    # 建立app id
    produce(language: "Simplified Chinese")
    # produce(language: "Simplified Chinese", skip_itc: true)

    # 將devices.txt裡面的device id加入itunes
    register_devices(devices_file: "devices.txt")

    # 產生推播用憑證
    #pem()

    # 產生三個provisioning file
    match(
      type: "development",
      force: true,
      keychain_name: "ios-build.keychain",
      keychain_password: ENV['KEYCHAIN_PASSWORD']
    )
    match(
      type: "adhoc",
      force: true,
      keychain_name: "ios-build.keychain",
      keychain_password: ENV['KEYCHAIN_PASSWORD']
    )
    match(
      type: "appstore",
      force: true,
      keychain_name: "ios-build.keychain",
      keychain_password: ENV['KEYCHAIN_PASSWORD']
    )

  end
  #抓取所有provision profile指令
  lane :matchAll do
    sh("fastlane match development clone_branch_directly&&fastlane match adhoc clone_branch_directly&&fastlane match appstore clone_branch_directly")
  end
end